<?xml version="1.0" encoding="UTF-8"?>

<!-- This file is part of the documentation of MathBook XML   -->
<!--                                                          -->
<!--    MathBook XML Author's Guide                           -->
<!--                                                          -->
<!-- Copyright (C) 2013-2016  Robert A. Beezer                -->
<!-- See the file COPYING for copying conditions.             -->

<chapter xml:id="Combinatorics" xmlns:xi="http://www.w3.org/2001/XInclude">
    <title>Counting and Combinatorics</title>

<section xml:id="CombinatoricsIntroduction"><title>Counting without Counting?</title>

<p>
One of the earliest applications of mathematics you probably remember is how you could use number to count things. For many, this is what they think people do when they do mathematics. In this chapter, we will discover that it is possible to count items without actually listing them all.
</p>

<p>T
o illustrate, consider counting the number of ways one can arrange Peter, Paul, and Mary with the order important.  Listing the possibilities:
<ul>
	<li>Peter, Paul, Mary</li>
	<li>Peter, Mary, Paul</li>
	<li>Paul, Peter, Mary</li>
	<li>Paul, Mary, Peter</li>
	<li>Mary, Peter, Paul</li>
	<li>Mary, Paul, Peter</li>
</ul>
So, it is easy to see that these are all of the possible outcomes and that the total number of such outcomes is 6. What happens however if we add Simone to the list?
<ul>
	<li>Simone, Peter, Paul, Mary</li>
	<li>Simone, Peter, Mary, Paul</li>
	<li>Simone, Paul, Peter, Mary</li>
	<li>Simone, Paul, Mary, Peter</li>
	<li>Simone, Mary, Peter, Paul</li>
	<li>Simone, Mary, Paul, Peter</li>

	<li>Peter, Simone, Paul, Mary</li>
	<li>Peter, Simone, Mary, Paul</li>
	<li>Paul, Simone, Peter, Mary</li>
	<li>Paul, Simone, Mary, Peter</li>
	<li>Mary, Simone, Peter, Paul</li>
	<li>Mary, Simone, Paul, Peter</li>

	<li>Peter, Paul, Simone, Mary</li>
	<li>Peter, Mary, Simone, Paul</li>
	<li>Paul, Peter, Simone, Mary</li>
	<li>Paul, Mary, Simone, Peter</li>
	<li>Mary, Peter, Simone, Paul</li>
	<li>Mary, Paul, Simone, Peter</li>

	<li>Peter, Paul, Mary, Simone</li>
	<li>Peter, Mary, Paul, Simone</li>
	<li>Paul, Peter, Mary, Simone</li>
	<li>Paul, Mary, Peter, Simone</li>
	<li>Mary, Peter, Paul, Simone</li>
	<li>Mary, Paul, Peter, Simone</li>
</ul>
Notice how the list quickly grows when just one more choice is added. This example illustrates how keeping track of the number of items in a set can quickly get impossible to manage unless we can use a more mathematical approach that allows you to count the number of possibilities without having to list them all.
</p>

</section>




<section  xml:id="CombinatoricsGeneralities"><title>General Counting Principles</title>
	
<definition xml:id="DefnCardinality"><title>Cardinality</title>
<statement>
		<p>Given a set of elements A, the number of elements in the 
		set is known as its cardinality and is denoted |A|. If the set has 
		an infinite number of elements then we set |A| = <m>\infty</m>.
		</p>
</statement>
</definition>
	
<p>
In order to "count without counting" we establish the following foundational principle:
</p>


<theorem xml:id="MultiplicationPrinciple"><title>Multiplication Principle</title>
<statement>
	<p>
	Given two successive events A and B, the number of ways 
	to perform A and then B is |A||B|.
	</p>
</statement>
<proof>
	<p>
	If either of the events has infinite cardinality, then it is clear
	that the number of ways to perform A and then B will also be 
	infinite. So, assume that both |A| and |B| are finite.
	In order to count the successive events, enumerate the elements in
	each set
	<md>
		<mrow>A = \left \{ a_1, a_2, a_3, ... , a_{|A|} \right \}</mrow> 	
	and
		<mrow>B = \left \{  b_1, b_2, b_3, ... , b_{|B|} \right \}</mrow>
	</md>
	and consider the function f(k,j) = (k-1)|B| + j. This function is 
	one-to-one and onto from the set 
		<me>\left \{ (k,j): 1 \le k \le |A|, 1 \le j \le |B| \right \} </me>
	onto 
		<me>\left \{ s : 1 \le s \le |A| |B| \right \}.</me>
	Since this second set has |A| |B| elements then the conclusion follows. 
	</p>
</proof>
</theorem>



<exercise><title>WebWork - Multiplications Principle</title>
		<webwork source="Library/Mizzou/Finite_Math/Set_Theory_Addition_and_Multiplication_Principles/MultiplicationPrinciple2.pg">
		</webwork>
</exercise>



<exercise><title>WebWork - Counting without Counting</title>
		<webwork source="Library/Rochester/setDiscrete9Counting/ur_dis_9_2.pg">
		</webwork>
</exercise>


<definition xml:id="DefnFactorial"><title>Factorial</title>
<statement>
	<p>
	For any natural number n, 
		<me>n! = n(n-1)(n-2) ... 3 \cdot 2 \cdot 1</me>
	and by convention set 0! = 1.
	</p>
</statement>
</definition>



<example><title>iPad security code</title>
<p>
Consider your ipad's security. To unlock the screen suppose you need to enter a four digit pass code. How easy is it to guess this pass code?
</p>
<p>Using the standard 10 digit keypad, we first have two questions to consider?
		<ol>
			<li>Does the order in which the digits are entered matter?</li>
			<li>Can you reuse a digit more than once?</li>
		</ol>
		For the ipad, if the order does matter and you cannot reuse digits, the number of possible codes can be determined by considering each digit as a separate event with four such events in succession providing the right code. By successively applying the multiplication principle, you find that the number of possible codes is the number of remaining available digits at each step.  Namely, <m>10 \times 9 \times 8 \times 7 = 5040.</m>
</p>
<p>
		On the other hand, if you were allowed to reuse the digits then the number of possible outcomes would be more since all 10 digits would be available for each event.  Namely, <m>10 \times 10 \times 10 \times 10 = 10000.</m>
</p>
<p>
		Now, consider how this changes if you can use a 4 or 6 digit passcode. Determine the number of possible passcodes.
</p>
</example>

	
<example><title>iPad security code with greasy fingers</title>
		<p>Reconsider your ipad's security. In this case, you like to eat
		chocolate bars and have greasy fingers. When you type in your passcode
		your fingers leave a residue over the four numbers pressed. If someone
		now tries to guess your passcode, how many possible attempts are necessary?</p>
		<p>Since there are only four numbers to pick from with order important, the number of possible passcodes remaining is <m>4 \times 3 \times 2 \times 1 = 24</m></p>
</example>


	
<example><title>National Treasure</title>
		<p>In the 2004 movie National Treasure, Ben and Riley are attempting 
		to guess Abagail's password to enter the room with the Declaration. 
		They are able
		to determine the passphrase to get into the vault room by doing a scan
		that detects the buttons pushed (not due to chocolate but just due to 
		the natural oils on fingers). They notice that the buttons pushed 
		include the characters AEFGLORVY.</p>
		<p>Assuming these characters are used only once each, how many possible
		passphrases are possible?</p>
		<p>
		In this case, the order of the characters matters but all of the 
		characters are distinct. Since we have 9 characters provided, the we can
		consider each character as an event with the first event as a choice
		from the 9, the second event as a choice from the remaining 8, etc. This
		gives <m>9 \times 8 \times ... \times 1 = 362880</m> possible 
		passphrases.
		</p>
		<p>Assuming that some of the characters could be used more than once, 
		how many passphrases need to be considered if the total length
		of passphrase can be at most 12 characters?</p>
		<p>Notice, in this case you don't know which characters might be reused and so the number of possible outcomes will be much larger. What is the answer?</p>
		<p>You can break this problem down into distinct cases:
		<ul>
			<li><p>Using 9 characters: The answer was computed above.</p></li>
			<li><p>Using 10 characters: In this case, 1 character can be used twice. To determine the number of possibilities, let's first pick which character can be doubled. There are 9 options for picking that character.  Next, if we consider the two instances of that letter as distinct values then we can just count the number of ways to arrange unique 10 characters which is 10! However, swapping the two characters (which are actually identical) would not give a new passphrase. Since these are counted twice, let's divide these out to give 10!/2.</p></li>
			<li><p>Using 11 characters: In this situation we have two unique options:
				<ul>
					<li><p>One character is used three times and the others just once.</p>
					<p>Continuing as in the previous case, 11!/3!.</p>
					<li>Two characters are used twice and the others just once.</li>
					</li>
				</ul>
				</p>
			</li>
			<li><p>Using 12 characters</p></li>
			<ol>
			
				<li>One letter from the nine is used four times and all the others are used once.</li>
				<li>One letter is used three times, another letter is used two times, and the others are used once.</li>
				<li>Three letters are used twice and the others are used once.</li>
			</ol>
		</ul>
			</p>
		<p>With this large collection of possible outcomes, how are the movie
		characters able to determine the correct "VALLEYFORGE" passphrase?</p>
</example>

	
</section>



<section  xml:id="Permutations"><title>Permutations</title>

<p>
When counting various outcomes the order of things sometimes matters. When the order of a set of elements changes we call the second a permutation (or an arrangement) of the first.
</p>


<theorem xml:id="PermuationsOfAll"><title>Permutations of everything</title>
<statement>
	<p>The number of permutations of n distinct items is n!</p>
</statement>
<proof>
			<p>Notice that if n=1, then there is only 1 item to arrange and 
			that there is only one possible arrangment.</p>
			<p>
			By induction, assume that any set with n elements has n! arrangments 
			and assume that 
			<md>
			<mrow>A = \left \{ a_1, a_2, ... , a_n, a_{n+1} \right \}.</mrow>
			</md>
			Notice that there are n+1 ways to choose 1 element from A and that in doing so leaves a set with n elements. Combining the induction hypothesis with the multiplication principle this gives (n+1)n! = (n+1)! possible outcomes.
			</p>
</proof>
</theorem>


<p>
One can interpret successive ordered selections as branching through a "tree" structure.  Indeed, starting with the set {A,B,C} one may pick any of the three but then a subsequent selection only has two possibilities for the next selection and so forth. The tree below illustrates that there are six ways to order two items from a group of size three.
<image source="images/PermutationSmall.png" />
</p>
	
<p>
Going one step further, what about ordering the letters in {A, B, C, D}? You can start by picking one of the four letters, say A, and then arranging B, C, and D.  Then, start with B and arrange A, C, and D and so on.  This gives:
	</p>
	<p>	ABCD, ABDC, ACBD, ACDB, ADBC, ADCB</p>
	<p>	BACD, BADC, BCAD, BCAB, BDAC, BDCA</p>
	<p>	CBAD, CBDA, CABD, CADB, CDBA, CDAB</p>
	<p>	DBCA, DBAC, DCBA, DCAB, DABC, DACB</p>
	<p>which is 24 different options or <m>4! = 4 \cdot 3 \cdot 2 \cdot 1 = 24</m>.  This can be viewed using a tree structure where each decision creates a new branch.
	
<image source="images/PermutationAllTree.png" />
</p>


<theorem xml:id="PermutationWithoutReplacementDistinguishable"><title>Permutations of a subset without replacement</title>
<statement>
			<p> 
			The number of ways to arrange r items from a set of n distinct items 
			is 
			<me> _nP_r = \frac{n!}{(n-r)!} </me>
			This is sometimes denoted also as P(n,r) or <m>P_r^n</m>.
			</p>
</statement>
<proof>
			<p>
			If <m>r \gt n</m> or <m>r \lt 0 </m> then this is not possible and so the result would be no permuatations. Otherwise, apply the multiplication principle r times noting that there are 
			n choices for the first selection, n-1 choices for the second
			selection, and with n-r+1 choices for the rth selection. This gives
			<md>
				<mrow>_nP_r &amp; = n(n-1) ... (n-r+1)</mrow>
				<mrow>&amp; = n(n-1) ... (n-r+1)\frac{(n-r)!}{(n-r)!}</mrow>
				<mrow>&amp; = \frac{n(n-1) ... (n-r+1)(n-r)!}{(n-r)!}</mrow>
				<mrow>&amp; = \frac{n!}{(n-r)!}</mrow>
			</md>
			</p>
</proof>
</theorem>


<p>
Following the tree idea from above, continue for several steps but then stop once you have gone r steps in.  For example, it is easy to see that <m>_5P_2 = 20</m> using a tree.

<image source="images/PermutationSubTree.png" width="50%"/>


</p>


<exercise><title>WebWork - Permutations</title>
		<webwork source="Library/Rochester/setProbability1Combinations/ur_pb_1_9.pg">
		</webwork>
</exercise>	


<theorem xml:id="PermutationWithReplacementDistinguishable"><title>Permutations of a subset with replacement</title>
		<statement>
		<p>The number of ways to obtain an arrangement of r choices from a group of size n is 
		<me>n^r</me>
		</p>
		</statement>
		<proof>
			<p>
			Use the multiplication principle r times and see that for each choice all n objects in the universe remain available.  That is, 
			<me>n \cdot n \cdot n ... n = n^r</me>
			</p>
		</proof>
</theorem>
	
	
<theorem xml:id="MultinomialCoefficients"><title>Permutations when not all items are distinguishable (Multinomial Coefficients)</title>
<statement>
	<p>
If n items belong to s categories, <m>n_1</m> in first, <m>n_2</m> in second, ... , <m>n_s</m> in the last, the number of ways to pick all is
		<me>\frac{n!}{n_1! \cdot n_2! ... n_s!}</me>	
	</p>
</statement>
<proof>
	<p>
	Enumerate all of the n data items individually with the <m>n_1!</m> identical values first and the remaining groups in like manner to get the enumerated list 
	<me>
	  \left \{ x_{1,1}, ..., x_{1,n_1}, x_{2,1}, ..., x_{2,n_2}, ... , x_{s,1}, ..., x_{s,n_s} \right \}
	</me>
	In this order, there are <m>n_1!</m> ways to arrange the first group, <m>n_2!</m> ways to arrange the second, etc. There are <m>n_1! \times n_2! \times ... \times \n_s!</m> ways to arrange all of the categories together with groups in this order but none of those group reorders does anything since those data values are all the same. Dividing out those from the <m>n!</m> original permutations of all items leaves one with the multinomial coefficient. 
	</p>
</proof>
</theorem>


	
<exercise><title>WebWork - More Permutations</title>
		<webwork source="Library/NAU/setCounting/RepeatedCombination1.pg">
		</webwork>
</exercise>	
		
</section>



<section  xml:id="Combinations"><title>Combinations</title>

<p>
When counting various outcomes sometimes the order of things does not matter.
If so, each unique unordered outcome is called a combination. 
</p>
<p>
Once again, consider the permutations when selecting three letters from {A, B, C, D}.
<ol>
<li>
<ul>
<li>A,B,C</li>
<li>A,C,B</li>
<li>B,A,C</li>
<li>B,C,A</li>
<li>C,A,B</li>
<li>C,B,A</li>
</ul>
</li>
<li>
<ul>
<li>A,B,D</li>
<li>A,D,B</li>
<li>B,A,D</li>
<li>B,D,A</li>
<li>D,A,B</li>
<li>D,B,A</li>
</ul>
</li>
<li>
<ul>
<li>A,C,D</li>
<li>A,D,C</li>
<li>C,A,D</li>
<li>C,D,A</li>
<li>D,A,C</li>
<li>D,C,A</li>
</ul>
</li>
<li>
<ul>
<li>B,C,D</li>
<li>B,D,C</li>
<li>C,B,D</li>
<li>C,D,B</li>
<li>D,B,C</li>
<li>D,C,B</li>
</ul>
</li>
</ol>

Notice how these 24 permutations fall into only four distinct categories if the order does not matter. Therefore, from a group of size four you can pick an unordered subset of size three in only 4 ways rather than the original 24.
</p>

<p>
In general, it would be nice to have a direct formula to determine the number of such combinations without having to explicitly list them all out.
</p>

<theorem xml:id="CombinationWithoutReplacementDistinguishable"><title>Combinations of a subset without replacement</title>
<statement>
			<p>
			The number of ways to arrange r items from a set of n distinct items 
			is 
			<me> _nC_r = \frac{n!}{r!(n-r)!} </me>
			This is sometimes denoted C(n,r) or <m>C_r^n</m> or <m>{n \choose r}</m>.
			</p>
</statement>
<proof>
			<p>
			Consider creating a permutation of r objects from a set of size n
			by first picking an unordered subset of size r and then counting 
			the number of ways to order that subset. Using our notation and the
			multiplication principle,
		
				<me>_nP_r = _nC_r \cdot r!</me>
	
			Dividing by <m>r!</m> gives the result.
			</p>
</proof>
</theorem>



<theorem xml:id="CombinationWithReplacementDistinguishable"><title>Combinations of a subset with replacement</title>
<statement>
			<p>
			The number of ways to arrange r items from a set of n distinct items 
			is 
			<me> _{n+r-1}C_r = {{n+r-1} \choose r} = \frac{(r+n-1)!}{r!(n-1)!} </me>
			</p>
</statement>
<proof>
			<p>
			Label each item in your group in some defined order. Since order doesn't matter, as you repeatedly sample r times with replacement you can always write down your outcomes sorted from low to high placement. Finally, separate like values by some symbol, say "|", and consider each of the n distinct objects as indistinct *'s. There will be n-1 of these separators since there will be n to choose from. For example, if choosing r=6 times from the set {a, b, c, d}, then the outcome b, b, a, d, a, b could be collected as a, a, b, b, b, d and written in our code as **|***||* .  Notice that shuffling around the identical *'s would not change the code (and similarly for the identical |'s) but swapping a * with a | would be a different outcome. Therefore, we can consider this to be a <xref ref="MultinomialCoefficients">multinomial coefficient</xref> and the number of ways to rearrange this code is
			<me>\frac{(r + n-1)!}{r!(n-1)!}.</me>
			</p>
</proof>
</theorem>


<exercise><title>WebWork - Combinations</title>
		<webwork source="Library/Mizzou/Finite_Math/Set_Theory_Permutations_Combinations/7cardPokerhand.pg">
		</webwork>
		<conclusion>
		<p>
		Notice that to determine the number of outcomes required you to use the combination forumula several times and then multiply the results using the multiplication principle.
		</p>
		</conclusion>
</exercise>	



<exercise><title>WebWork - More Combinations</title>
		<webwork source="Library/Rochester/setAlgebra38Counting/sw10_2_60.pg">
		</webwork>
	<conclusion>
		<p>
		Once again, you can see that using the formulas can be easy and also can be part of a bigger problem pasted together using the multiplication principle.
		</p>
	</conclusion>
</exercise>	


<example><title>Ipad Security</title>
<p>
Revisiting your ipad's security, what happens if the order in which the digits are entered does not matter? If so, then you would be picking a combination of 4 digits without replacement from a group of 10 digits. Namely, 
		<md>
			<mrow>\frac{10!}{4!6!} &amp; = \frac{10 \times 9 \times 8 \times 7 \times 6!}{4 \times 3 \times 2 \times 1 \times 6!}</mrow>
			<mrow>&amp; = \frac{10 \times 9 \times 8 \times 7}{4 \times 3 \times 2 \times 1}</mrow>
			<mrow>&amp; = \frac{5040}{24}</mrow>
			<mrow>&amp; = 210.</mrow>
		</md>
		Notice that the total number of options is much smaller when order does not matter.
		</p>
		<p>
		Note that if you were allowed to reuse the digits then the number of possible outcomes would be
		<md>
			<mrow>\frac{13!}{4!9!} &amp; = \frac{13 \times 12 \times 11 \times 10}{4 \times 3 \times 2 \times 1} </mrow>
			<mrow> &amp; = 715</mrow>
		</md>
		which once again is more since numbers are allowed to repeat.
</p>
</example>

	
		
<definition xml:id="BinomialCoefficients"><title>Binomial Coefficients</title>
<statement>
		<p>
		The value <m>_nC_r</m> is known as the binomial coefficient. It is
		denoted by <m>{n \choose r}</m> and is read "n choose r".
		</p>
</statement>
</definition>
	
	
<p>
Binomial coefficients have a number of interesting properties.  Many of these are very useful as well in probability calculations.  Several of these properties are collected below. In particular, these relationships verify that the binomial coefficients are the values found in Pascal's Triangle.
</p>


<sage>
<title>Binomial Coefficients give Pascal's Triangle</title>
<input>
@interact
def _(n = slider(1,15,1,5)):
    for row in range(n+1):
        binoms = sorted(binomial_coefficients(row).items())
        given_n = []
        for k in range(row+1):
            given_n.append(binoms[k][1])
        pretty_print('%s'%given_n)
</input>
</sage>



<theorem xml:id="BinomialCoefficientFormulas"><title> Binomial Coefficient Formulas</title>
<statement>
<p> 
For <m> n \in \mathbb{N}</m>,
	<ol>
		<li><m>\binom{n}{0} = 1</m></li>
		<li><m>\binom{n}{n} = 1</m></li>
		<li><m>\binom{n}{1} = n</m></li>
		<li><m>\binom{n}{n-1} = n</m></li>
		<li><m>\binom{n}{r} = \binom{n}{n-r}</m></li>
		<li><m>\binom{n+1}{r+1} = \binom{n}{r} + \binom{n}{r+1}</m></li>
	</ol>
</p>
</statement>
<proof>
	<p>
	<ol>
		<li><m>\binom{n}{0} = \frac{n!}{0!(n-0)!} = 1</m></li>
		<li><m>\binom{n}{n} = \frac{n!}{n!(n-n)!} = 1</m></li>
		<li><m>\binom{n}{1} = \frac{n!}{1!(n-1)!} = n</m></li>
		<li><m>\binom{n}{n-1} = \frac{n!}{(n-1)!(n-(n-1))!} = n</m></li>
		<li><m>\binom{n}{r} = \frac{n!}{r!(n-r)!} = \frac{n!}{(n-r)!(n-(n-r))!} = \binom{n}{n-r}</m></li>
		<li>
		<md>
			<mrow>\binom{n}{r} + \binom{n}{r+1} &amp; = \frac{n!}{r!(n-r)!} + \frac{n!}{(r+1)!(n-(r+1))!}</mrow>
			<mrow> &amp; = (r+1) \frac{n!}{(r+1)!(n-r)!} \\ + (n-r) \frac{n!}{(r+1)!(n-r))!}</mrow>
			<mrow> &amp; = \frac{(r+1) n! + (n-r)n!}{(r+1)!(n-r)!}</mrow>
			<mrow> &amp; = \frac{(n+1) n!}{(r+1)!((n+1)-(r+1))!}</mrow>
			<mrow> &amp; = \binom{n+1}{r+1}</mrow>
		</md>
		</li>
	</ol>
	</p>
</proof>
</theorem>

</section>


<section  xml:id="CombinatoricsSummary"><title>Summary</title>

<introduction>
<p>
Here are the important results from this chapter:
</p>
</introduction>

<p>
<xref ref="MultiplicationPrinciple">Multiplication Principle</xref>
</p>
<p>
<xref ref="DefnFactorial">Factorial</xref>
</p>
<p>
<xref ref="PermutationWithoutReplacementDistinguishable">Permutations without replacement</xref>
</p>
<p>
<xref ref="PermutationWithReplacementDistinguishable">Permutations with replacement</xref>
</p>
<p>
<xref ref="MultinomialCoefficients">Multinomial Coefficients</xref>
</p>
<p>
<xref ref="CombinationWithoutReplacementDistinguishable">Combinations without replacement</xref>
</p>
<p>
<xref ref="CombinationWithReplacementDistinguishable">Combinations with replacement</xref>
</p>
<p>
<xref ref="BinomialCoefficients">Binomial Coefficients</xref>
</p>

</section>

<section xml:id="CombinatoricsExercises"><title>Exercises</title>
<p>Complete the online homework "Counting".</p>

<p>
A standard deck of playing cards consists of 52 cards broken up into four "suits" known as Hearts, Spades, Diamonds, and Clubs. Each suit is broken up additionally into unique cards with "face values" from {2, 3, 4, 5, 6, 7, 8, 9, 10, Jack, Queen, King, Ace} and generally in that order from low to high.</p>
<p>
1.  Pick two cards without replacement one after the other from this deck and determine the following number of possible outcomes:
<ul>
<li>The number of ways to get an Ace for both cards.</li>
<li>The number of ways to get an Ace for only one of the two cards.</li>
<li>The number of ways to get an Ace on the first draw and a Spade on the second draw.</li>
</ul>
2.  Pick five cards without replacement one after the other from a newly shuffled full deck and determine the following number of possible outcomes:
<ul>
<li>All cards have different faces</li>
<li>"A pair". That is, two cards have the same face but the others are from three other faces.</li>
<li>"Three of a kind".  That is, three cards have the same face but the others are from two other faces.</li>
<li>"Two Pair". That is, two cards come from one face, two other cards come from a common face that is not the same as the first two cards, and the last card comes from some other face.</li>
<li>"Full House". That is, three cards have the same face and the other two come from a common face that is not the same as the first three cards.</li>
<li>"Four of a Kind". That is, four cards have the same face and the other card comes from some other face.</li>
<li>"Flush". That is, the five cards for a sequence in order of adjacent faces in the original list and from the same suit.</li>
<li>"Royal Flush". That is, a flush but only with the cards {Ace, King, Queen, Jack, 10}.</li>
</ul>
</p>


<p>Completely determine the number of possible passphrases for the National Treasure example started above. Present your answer in a report form.</p>
</section>

</chapter>
